
machine(GPUCopyDMA, "VI Copy Engine Controller")
: Sequencer * sequencer;
  Cycles request_latency := 6;

  MessageBuffer * responseFromDir, network="From", virtual_network="1",
        vnet_type="response";
  MessageBuffer * reqToDirectory, network="To", virtual_network="0",
        vnet_type="request";

{
  state_declaration(State, desc="CE states", default="GPUCopyDMA_State_READY") {
    READY, AccessPermission:Invalid, desc="Ready to accept a new request";
    BUSY_RD, AccessPermission:Busy, desc="Busy: currently processing a request";
    BUSY_WR, AccessPermission:Busy, desc="Busy: currently processing a request";
  }

  enumeration(Event, desc="CE events") {
    ReadRequest,  desc="A new read request";
    WriteRequest, desc="A new write request";
    Data,         desc="Data from a CE memory read";
    Ack,          desc="CE write to memory completed";
  }

  // TBE fields
  structure(TBE, desc="...") {
    State TBEState,          desc="Transient state";
    DataBlock DataBlk,       desc="data for the block, required for concurrent writebacks";
  }

  structure(TBETable, external="yes") {
    TBE lookup(Addr);
    void allocate(Addr);
    void deallocate(Addr);
    bool isPresent(Addr);
    bool areNSlotsAvailable(int);
  }
  TBETable TBEs, template="<GPUCopyDMA_TBE>", constructor="m_number_of_TBEs";

  void set_tbe(TBE b);
  void unset_tbe();

  MessageBuffer mandatoryQueue;

  State getState(TBE tbe, Addr addr) {
    if (is_valid(tbe)) {
      return tbe.TBEState;
    }
    else {
      return State:READY;
    }
  }

  void setState(TBE tbe, Addr addr, State state) {
    if (is_valid(tbe)) {
      tbe.TBEState := state;
    }
  }

  AccessPermission getAccessPermission(Addr addr) {
    return AccessPermission:NotPresent;
  }

  void setAccessPermission(Addr addr, State state) {
  }

  void functionalRead(Addr addr, Packet *pkt) {
    error("CE does not support functional read.");
  }

  int functionalWrite(Addr addr, Packet *pkt) {
    error("CE does not support functional write.");
  }

  out_port(reqToDirectory_out, DMARequestMsg, reqToDirectory, desc="...");

  in_port(dmaRequestQueue_in, RubyRequest, mandatoryQueue, desc="...") {
    if (dmaRequestQueue_in.isReady()) {
      peek(dmaRequestQueue_in, RubyRequest, block_on="LineAddress") {
        if (in_msg.Type == RubyRequestType:LD || in_msg.Type == RubyRequestType:LD_Bypass) {
          trigger(Event:ReadRequest, in_msg.LineAddress, TBEs[in_msg.LineAddress]);
        } else if (in_msg.Type == RubyRequestType:ST) {
          trigger(Event:WriteRequest, in_msg.LineAddress, TBEs[in_msg.LineAddress]);
        } else {
          error("Invalid request type");
        }
      }
    }
  }

  in_port(dmaResponseQueue_in, DMAResponseMsg, responseFromDir, desc="...") {
    if (dmaResponseQueue_in.isReady()) {
      peek(dmaResponseQueue_in, DMAResponseMsg) {
        if (in_msg.Type == DMAResponseType:ACK) {
          trigger(Event:Ack, in_msg.LineAddress, TBEs[in_msg.LineAddress]);
        } else if (in_msg.Type == DMAResponseType:DATA) {
          trigger(Event:Data, in_msg.LineAddress, TBEs[in_msg.LineAddress]);
        } else {
          error("Invalid response type");
        }
      }
    }
  }

  action(s_sendReadRequest, "r", desc="Send a DMA read request to memory") {
    peek(dmaRequestQueue_in, RubyRequest) {
      enqueue(reqToDirectory_out, DMARequestMsg, request_latency) {
        out_msg.PhysicalAddress := in_msg.PhysicalAddress;
        out_msg.LineAddress := in_msg.LineAddress;
        out_msg.Type := DMARequestType:READ;
        out_msg.Requestor := machineID;
        out_msg.DataBlk := tbe.DataBlk;
        out_msg.Len := in_msg.Size;
        out_msg.Destination.add(map_Address_to_Directory(address));
        out_msg.MessageSize := MessageSizeType:Writeback_Control;
      }
    }
  }

  action(s_sendWriteRequest, "\s", desc="Send a DMA write request to memory") {
    assert(is_valid(tbe));
    peek(dmaRequestQueue_in, RubyRequest) {
      enqueue(reqToDirectory_out, DMARequestMsg, request_latency) {
          out_msg.PhysicalAddress := in_msg.PhysicalAddress;
          out_msg.LineAddress := in_msg.LineAddress;
          out_msg.Type := DMARequestType:WRITE;
          out_msg.Requestor := machineID;
          out_msg.Len := in_msg.Size;
          out_msg.DataBlk := tbe.DataBlk;
          out_msg.Destination.add(map_Address_to_Directory(address));
          out_msg.MessageSize := MessageSizeType:Writeback_Control;
        }
      }
  }

  action(s_ackCallback, "s", desc="Notify controller of store complete") {
    assert(is_valid(tbe));
    peek(dmaResponseQueue_in, DMAResponseMsg) {
      sequencer.writeCallback(in_msg.LineAddress, tbe.DataBlk, false,
                              MachineType:GPUCopyDMA);
    }
  }

  action(d_dataCallback, "d", desc="Write data to dma sequencer") {
    peek(dmaResponseQueue_in, DMAResponseMsg) {
      DataBlock db := in_msg.DataBlk;
      sequencer.readCallback(in_msg.LineAddress, db, false,
                             MachineType:GPUCopyDMA);
    }
  }

  action(p_popRequestQueue, "p", desc="Pop request queue") {
    dmaRequestQueue_in.dequeue();
  }

  action(p_popResponseQueue, "\p", desc="Pop request queue") {
    dmaResponseQueue_in.dequeue();
  }

  action(v_allocateTBE, "v", desc="Allocate TBE") {
    TBEs.allocate(address);
    set_tbe(TBEs[address]);
  }

  action(w_deallocateTBE, "w", desc="Deallocate TBE") {
    TBEs.deallocate(address);
    unset_tbe();
  }

  action(zz_stallAndWaitDmaQueue, "\z", desc="Send the head of the mandatory queue to the back of the queue.") {
    stall_and_wait(dmaRequestQueue_in, address);
  }

  transition({BUSY_RD, BUSY_WR}, {ReadRequest, WriteRequest}) {
    zz_stallAndWaitDmaQueue;
  }

  transition(READY, ReadRequest, BUSY_RD) {
    v_allocateTBE;
    s_sendReadRequest;
    p_popRequestQueue;
  }

  transition(READY, WriteRequest, BUSY_WR) {
    v_allocateTBE;
    s_sendWriteRequest;
    p_popRequestQueue;
  }

  transition(BUSY_RD, Data, READY) {
    d_dataCallback;
    w_deallocateTBE;
    p_popResponseQueue;
  }

  transition(BUSY_WR, Ack, READY) {
    s_ackCallback;
    w_deallocateTBE;
    p_popResponseQueue;
  }
}
