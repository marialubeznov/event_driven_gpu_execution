// Copyright (c) 2013 Mark D. Hill and David A. Wood
// All rights reserved.
//
// The license below extends only to copyright in the software and shall
// not be construed as granting a license to any other intellectual
// property including but not limited to intellectual property relating
// to a hardware implementation of the functionality of the software
// licensed hereunder.  You may use the software subject to the license
// terms below provided that you ensure that this notice is replicated
// unmodified and in its entirety in all distributions of the software,
// modified or unmodified, in source code or in binary form.
//
// Redistribution and use in source and binary forms, with or without
// modification, are permitted provided that the following conditions are
// met: redistributions of source code must retain the above copyright
// notice, this list of conditions and the following disclaimer;
// redistributions in binary form must reproduce the above copyright
// notice, this list of conditions and the following disclaimer in the
// documentation and/or other materials provided with the distribution;
// neither the name of the copyright holders nor the names of its
// contributors may be used to endorse or promote products derived from
// this software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
// "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
// LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
// A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
// OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
// SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
// LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
// DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
// THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
//
// Authors: Jason Power

output header {{
        void gpuFinishPageFault(int gpuId, ThreadContext *tc);
    class GPUFaultFinish : public X86ISA::X86MicroopBase
    {
      public:
        GPUFaultFinish(ExtMachInst _machInst, const char * instMnem,
                uint64_t setFlags) :
            X86MicroopBase(_machInst, "gpufaultfinish", instMnem,
                           setFlags | (ULL(1) << StaticInst::IsNonSpeculative),
                           No_OpClass)
        {
        }

        %(BasicExecDeclare)s

        std::string generateDisassembly(Addr pc,
                const SymbolTable *symtab) const;
    };
}};

output exec {{
    Fault
    GPUFaultFinish::execute(CPU_EXEC_CONTEXT *xc,
            Trace::InstRecord * traceData) const
    {
        gpuFinishPageFault(0, xc->tcBase());
        return NoFault;
    }
}};

output decoder {{
    std::string GPUFaultFinish::generateDisassembly(Addr pc,
            const SymbolTable *symtab) const
    {
        std::stringstream response;

        printMnemonic(response, instMnem, mnemonic);

        return response.str();
    }
}};

let {{
    class GPUFaultFinish(X86Microop):
        className = "GPUFaultFinish"
        def __init__(self):
            pass

        def getAllocator(self, microFlags):
            return "new GPUFaultFinish(machInst, macrocodeBlock, %s)" % \
                    self.microFlagsText(microFlags)

    microopClasses["gpufaultfinish"] = GPUFaultFinish
}};
